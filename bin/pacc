#!/usr/bin/php
<?php
/*LIBS*/
require_once dirname(dirname(__FILE__)) . '/lib/exceptions.php';

require_once dirname(dirname(__FILE__)) . '/lib/PaccSet.php';
require_once dirname(dirname(__FILE__)) . '/lib/PaccGrammar.php';
require_once dirname(dirname(__FILE__)) . '/lib/PaccSymbol.php';
require_once dirname(dirname(__FILE__)) . '/lib/PaccNonterminal.php';
require_once dirname(dirname(__FILE__)) . '/lib/PaccTerminal.php';
require_once dirname(dirname(__FILE__)) . '/lib/PaccProduction.php';

require_once dirname(dirname(__FILE__)) . '/lib/PaccToken.php';
require_once dirname(dirname(__FILE__)) . '/lib/tokens.php';
require_once dirname(dirname(__FILE__)) . '/lib/PaccTokenStream.php';
require_once dirname(dirname(__FILE__)) . '/lib/PaccTokenFilterOutStream.php';
require_once dirname(dirname(__FILE__)) . '/lib/PaccLexer.php';

require_once dirname(dirname(__FILE__)) . '/lib/PaccParser.php';

require_once dirname(dirname(__FILE__)) . '/lib/PaccGenerator.php';
require_once dirname(dirname(__FILE__)) . '/lib/PaccLRGenerator.php';
require_once dirname(dirname(__FILE__)) . '/lib/PaccLRItem.php';
require_once dirname(dirname(__FILE__)) . '/lib/PaccLRJump.php';
/*ENDLIBS*/

if ($argc < 2 || $argv[1] == '-h')
    die('Usage: ' . $argv[0] . " [-h] input [output]\n");

$opts['i'] = $argv[1];
$opts['o'] = $argc > 2 ? $argv[2] : 'y.tab.c';

try {
    $lines = @file($opts['i']);
    if ($lines === FALSE) { throw new Exception('Cannot read input file.'); }

    $stream = new PaccTokenFilterOutStream(
        PaccLexer::fromString(implode('', $lines)),
        array('PaccWhitespaceToken', 'PaccCommentToken')
    );
    $parser = new PaccParser($stream);
    $grammar = $parser->parse();

    $generator = new PaccLRGenerator($grammar);
    $generator->writeToFile($opts['o']);

} catch (PaccUnexpectedToken $e) {
    file_put_contents('php://stderr', 
        $e->getMessage() . PHP_EOL . 
        ((string) $e->token->line) . ': ' . rtrim($lines[$e->token->line - 1]) . PHP_EOL .
        str_repeat(' ', strlen((string) $e->token->line) + $e->token->position + 1) . '^' . PHP_EOL
    );
    die(-1);
} catch (PaccUnexpectedEnd $e) {
    file_put_contents('php://stderr', 
        $e->getMessage() . PHP_EOL
    );
    die(-1);
} catch (PaccBadIdentifier $e) {
    file_put_contents('php://stderr', 
        $e->getMessage() . PHP_EOL . 
        ((string) $e->token->line) . ': ' . rtrim($lines[$e->token->line - 1]) . PHP_EOL .
        str_repeat(' ', strlen((string) $e->token->line) + $e->token->position + 1) . '^' . PHP_EOL
    );
    die(-1);
} catch (Exception $e) {
    file_put_contents('php://stderr', 
        $e->getMessage() . PHP_EOL
    );
    die(-1);
}
